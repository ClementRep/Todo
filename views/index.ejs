<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To Do List</title>
    <style>
        .container {
            max-width: 600px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(235, 49, 2, 0.836);
        }

        h1 {
            text-align: center;
            font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
        }

        input[type="text"] {
            width: 80%;
            padding: 8px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        button[type="submit"] {
            background-color: #3498db;
            color: white;
            padding: 10px 15px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            border-radius: 4px;
        }

        button[type="submit"]:hover {
            background-color: #e61111;
        }

        ul {
            padding: 0;
            list-style-type: none;
        }

        ul li {
            cursor: pointer;
            position: relative;
            padding: 11px 10px 8px 40px;
            background: #eee;
            font-size: 18px;
            transition: 0.2s;
            list-style-type: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        ul li:nth-child(odd) {
            background: #f9f9f9;
        }

        .delete-btn {
            position: absolute;
            right: 10px;
            top: 10px;
            background: red;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 14px;
            border-radius: 4px;
        }

        .delete-btn:hover {
            background: darkred;
        }

        #background-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1; /* Ensures it stays in the background */
        }
    </style>
</head>
<body>
    <h1>To-do List</h1>

    <canvas id="background-canvas"></canvas>

    <div class="container">
        <ul id="List">
            <% tasks.forEach((task, index) => { %>
                <li>
                    <p><%= task.description %> - <%= task.time %></p>
                    <form action="/remove" method="post">
                        <input type="hidden" name="task" value="<%= task.description %>"> 
                        <button type="submit" class="delete-btn">Delete</button>
                    </form>
                </li>
            <% }); %>
        </ul>
        
        <form action="/add" method="post">
            <input type="text" id="txtInput" name="task" placeholder="Add a new task" required pattern=".*\S.*">
            <input type="email"  id="email" name="mail"  placeholder="enter your email">
            <input type="datetime-local" id="taskTime" name="time" required>
            <button type="submit">Add Task</button>
        </form>
    </div>

    <script type="module">
        import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.module.js';
        import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/jsm/loaders/GLTFLoader.js';
      
        // Scene, Camera, Renderer Setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(5, window.innerWidth / window.innerHeight, 5, 2000);
        const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById("background-canvas") });
        renderer.setSize(window.innerWidth, window.innerHeight);
      
        // Load the 3D Model
        const loader = new GLTFLoader();
        loader.load('ganymede_moon.glb', (gltf) => {
            const model = gltf.scene;
            scene.add(model);
            model.position.set(0, 0, 0); 
      
            function animate() {
                requestAnimationFrame(animate);
                model.rotation.y += 0.001; 
                renderer.render(scene, camera);
            }
            animate();
        }, undefined, (error) => {
            console.error('An error happened while loading the model:', error);
        });
      
        camera.position.z = 5;
      
        // Update Renderer and Camera on Window Resize
        window.addEventListener('resize', () => {
            renderer.setSize(window.innerWidth, window.innerHeight);
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
        });
   
    const tasks=document.querySelectorAll("#List li");

    tasks.forEach((task)=>{
        task.addEventListener("click", function() {
  if (task.style.textDecoration === "line-through") {
    task.style.textDecoration = "none"; 
  } else if(task.style.textDecoration ="line-through") { 
        task.style.textDecorationthickness="5px";
  }
});
});
    </script>
</body>
</html>
